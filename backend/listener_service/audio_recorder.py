# audio_recorder.py
import pyaudio
import wave
import threading
import os
import time
from logger import setup_logger

logger = setup_logger("audio_recorder")

class DualTrackRecorder:
    def __init__(self, output_dir="recordings"):
        self.output_dir = output_dir
        self.is_recording = False
        os.makedirs(output_dir, exist_ok=True)
        self.p = pyaudio.PyAudio()
        self.sample_rate = 16000
        self.channels = 1
        self.chunk = 1024

    def find_input_device(self):
        try:
            default = self.p.get_default_input_device_info()
            logger.info(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: [{default['index']}] {default['name']}")
            return default['index']
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω: {e}")
            raise

    def find_loopback_device(self):
        logger.info("üîç –ü–æ–∏—Å–∫ loopback-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 16000 –ì—Ü...")

        try:
            wasapi_info = self.p.get_host_api_info_by_type(pyaudio.paWASAPI)
            wasapi_index = wasapi_info['index']
            logger.info(f"WASAPI –¥–æ—Å—Ç—É–ø–µ–Ω (–∏–Ω–¥–µ–∫—Å: {wasapi_index})")
        except OSError:
            logger.warning("WASAPI –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            return None

        candidate = None
        for i in range(self.p.get_device_count()):
            dev = self.p.get_device_info_by_index(i)
            if dev['hostApi'] != wasapi_index:
                continue
            if dev['maxInputChannels'] <= 0:
                continue

            name = dev['name']
            name_lower = name.lower()

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —è–≤–Ω—ã–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã (–¥–∞–∂–µ —Å –±–∏—Ç–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π)
            mic_indicators = ['microphone', 'mic', 'input', '–≤—Ö–æ–¥']
            if any(ind in name_lower for ind in mic_indicators):
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–º–∏–∫—Ä–æ—Ñ–æ–Ω): [{i}] '{name}'")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ 16000 –ì—Ü
            try:
                supported = self.p.is_format_supported(
                    rate=16000,
                    input_device=i,
                    input_channels=1,
                    input_format=pyaudio.paInt16
                )
                if supported:
                    logger.info(f"‚úÖ –ù–ê–ô–î–ï–ù–û loopback: [{i}] '{name}' (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 16000 –ì—Ü)")
                    return i
                else:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç 16000 –ì—Ü): [{i}] '{name}'")
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –¥–ª—è [{i}] '{name}': {e}")

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫–∞–∫ fallback
            loopback_indicators = ['loopback', 'stereo', 'mix', '–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ', 'output', 'playback', 'headphones', '–¥–∏–Ω–∞–º–∏–∫–∏']
            if any(ind in name_lower for ind in loopback_indicators):
                candidate = i
                candidate_name = name

        if candidate is not None:
            logger.warning(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback loopback (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ 16000 –ì—Ü): [{candidate}] '{candidate_name}'")
            return candidate

        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ loopback-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ 16000 –ì—Ü")
        return None

    def save_wav(self, frames, filename):
        path = os.path.join(self.output_dir, filename)
        with wave.open(path, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.p.get_sample_size(pyaudio.paInt16))
            wf.setframerate(self.sample_rate)
            wf.writeframes(b''.join(frames))
        logger.info(f"üíæ –ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {path}")
        return path

    def start_recording(self, duration_sec):
        if self.is_recording:
            raise RuntimeError("Already recording")

        mic_index = self.find_input_device()
        loopback_index = self.find_loopback_device()

        if loopback_index is None:
            raise RuntimeError(
                "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∑–≤—É–∫–∞. "
                "–í–∫–ª—é—á–∏—Ç–µ 'Stereo Mix' –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VB-Cable."
            )

        mic_stream = self.p.open(
            format=pyaudio.paInt16,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            input_device_index=mic_index,
            frames_per_buffer=self.chunk
        )

        loopback_stream = self.p.open(
            format=pyaudio.paInt16,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            input_device_index=loopback_index,
            frames_per_buffer=self.chunk
        )

        self.is_recording = True
        user_frames = []
        remote_frames = []

        start_time = time.time()
        while self.is_recording and (time.time() - start_time) < duration_sec:
            try:
                mic_data = mic_stream.read(self.chunk, exception_on_overflow=False)
                lb_data = loopback_stream.read(self.chunk, exception_on_overflow=False)
                user_frames.append(mic_data)
                remote_frames.append(lb_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
                break

        mic_stream.stop_stream()
        mic_stream.close()
        loopback_stream.stop_stream()
        loopback_stream.close()

        timestamp = int(time.time())
        user_path = self.save_wav(user_frames, f"user_{timestamp}.wav")
        remote_path = self.save_wav(remote_frames, f"remote_{timestamp}.wav")

        self.is_recording = False
        return user_path, remote_path

    def stop(self):
        self.is_recording = False
        logger.info("‚èπÔ∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É")